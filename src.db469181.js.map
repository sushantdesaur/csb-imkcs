{"version":3,"sources":["src/paddle.js","src/input.js","src/collisionDetection.js","src/ball.js","src/brick.js","src/levels.js","src/game.js","src/index.js"],"names":["Paddle","game","gameWidth","width","height","maxSpeed","speed","position","x","y","gameHeight","ctx","fillStyle","fillRect","deltaTime","InputHandler","paddle","document","addEventListener","event","keyCode","moveLeft","moveRight","togglePause","start","stop","detectCollision","ball","gameObject","bottomOfBall","size","topOfBall","topOfObject","leftSideOfObject","rightSideOfObject","bottomOfObject","Ball","image","getElementById","reset","drawImage","lives","Brick","markedForDeletion","buildLevel","level","bricks","forEach","row","rowIndex","brick","brickIndex","push","level1","level2","GAMESTATE","PAUSED","RUNNING","MENU","GAMEOVER","NEWLEVEL","Game","bricksPerRow","gamestate","gameObjects","levels","currentLevel","length","object","update","filter","draw","rect","fill","font","textAlign","fillText","canvas","getContext","GAME_WIDTH","GAME_HEIGHT","lastTime","gameLoop","timestamp","clearRect","requestAnimationFrame"],"mappings":"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","file":"src.db469181.js","sourceRoot":"..","sourcesContent":["export default class Paddle {\n  constructor(game) {\n    this.gameWidth = game.gameWidth;\n    this.width = 150;\n    this.height = 30;\n\n    this.maxSpeed = 7;\n    this.speed = 0;\n\n    this.position = {\n      x: game.gameWidth / 2 - this.width / 2,\n      y: game.gameHeight - this.height - 10\n    };\n  }\n\n  moveLeft() {\n    this.speed = -this.maxSpeed;\n  }\n\n  moveRight() {\n    this.speed = +this.maxSpeed;\n  }\n\n  stop() {\n    this.speed = 0;\n  }\n\n  draw(ctx) {\n    ctx.fillStyle = \"#0f0\";\n    ctx.fillRect(this.position.x, this.position.y, this.width, this.height);\n  }\n\n  update(deltaTime) {\n    this.position.x += this.speed;\n    if (this.position.x <= 0) this.position.x = 0;\n    if (this.position.x + this.width > this.gameWidth)\n      this.position.x = this.gameWidth - this.width;\n  }\n}\n","import Game from \"./game\";\n\nexport default class InputHandler {\n  constructor(paddle, game) {\n    document.addEventListener(\"keydown\", (event) => {\n      switch (event.keyCode) {\n        case 37:\n          // alert(\"move left\");\n          paddle.moveLeft();\n          break;\n        case 39:\n          // alert(\"move right\");\n          paddle.moveRight();\n          break;\n        case 27:\n          game.togglePause();\n          break;\n        case 32:\n          game.start();\n          break;\n      }\n    });\n\n    document.addEventListener(\"keyup\", (event) => {\n      switch (event.keyCode) {\n        case 37:\n          // alert(\"move left\");\n          if (paddle.speed < 0) paddle.stop();\n          break;\n        case 39:\n          // alert(\"move right\");\n          if (paddle.speed > 0) paddle.stop();\n          paddle.stop();\n          break;\n      }\n    });\n  }\n}\n","export function detectCollision(ball, gameObject) {\r\n  //Check collision with paddle\r\n  let bottomOfBall = ball.position.y + ball.size;\r\n  let topOfBall = ball.position.y;\r\n\r\n  let topOfObject = gameObject.position.y;\r\n  let leftSideOfObject = gameObject.position.x;\r\n  let rightSideOfObject = gameObject.position.x + gameObject.width;\r\n  let bottomOfObject = gameObject.position.y + gameObject.height;\r\n\r\n  if (\r\n    bottomOfBall >= topOfObject &&\r\n    topOfBall <= bottomOfObject &&\r\n    ball.position.x >= leftSideOfObject &&\r\n    ball.position.x + ball.size <= rightSideOfObject\r\n  ) {\r\n    return true;\r\n  } else {\r\n    return false;\r\n  }\r\n}\r\n","import { detectCollision } from \"./collisionDetection\";\n\nexport default class Ball {\n  constructor(game) {\n    this.image = document.getElementById(\"image_ball\");\n\n    this.gameWidth = game.gameWidth;\n    this.gameHeight = game.gameHeight;\n\n    this.game = game;\n    this.size = 16;\n    this.reset();\n  }\n\n  reset() {\n    this.position = { x: 10, y: 400 };\n    this.speed = { x: 4, y: -2 };\n  }\n\n  draw(ctx) {\n    ctx.drawImage(\n      this.image,\n      this.position.x,\n      this.position.y,\n      this.size,\n      this.size\n    );\n  }\n\n  update(deltaTime) {\n    this.position.x += this.speed.x;\n    this.position.y += this.speed.y;\n\n    // wall on left or right\n    if (this.position.x + this.size > this.gameWidth || this.position.x < 0) {\n      this.speed.x = -this.speed.x;\n    }\n\n    // wall on top\n    if (this.position.y < 0) {\n      this.speed.y = -this.speed.y;\n    }\n\n    // bottom of game\n    if (this.position.y + this.size > this.gameHeight) {\n      this.game.lives--;\n      this.reset();\n    }\n\n    if (detectCollision(this, this.game.paddle)) {\n      this.speed.y = -this.speed.y;\n      this.position.y = this.game.paddle.position.y - this.size;\n    }\n  }\n}\n","import { detectCollision } from \"./collisionDetection\";\r\n\r\nexport default class Brick {\r\n  constructor(game, position) {\r\n    this.image = document.getElementById(\"image_brick\");\r\n\r\n    this.game = game;\r\n\r\n    this.position = position;\r\n    this.width = 78;\r\n    this.height = 22;\r\n\r\n    this.markedForDeletion = false;\r\n  }\r\n\r\n  update() {\r\n    if (detectCollision(this.game.ball, this)) {\r\n      this.game.ball.speed.y = -this.game.ball.speed.y;\r\n\r\n      this.markedForDeletion = true;\r\n    }\r\n  }\r\n\r\n  draw(ctx) {\r\n    ctx.drawImage(\r\n      this.image,\r\n      this.position.x,\r\n      this.position.y,\r\n      this.width,\r\n      this.height\r\n    );\r\n  }\r\n}\r\n","import Brick from \"./brick\";\r\n\r\nexport function buildLevel(game, level) {\r\n  let bricks = [];\r\n\r\n  level.forEach((row, rowIndex) => {\r\n    row.forEach((brick, brickIndex) => {\r\n      if (brick === 1) {\r\n        let position = {\r\n          x: 80 * brickIndex,\r\n          y: 75 + 24 * rowIndex\r\n        };\r\n        bricks.push(new Brick(game, position));\r\n      }\r\n    });\r\n  });\r\n\r\n  return bricks;\r\n}\r\n\r\nexport const level1 = [\r\n  // [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  // [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n  [0, 0, 0, 0, 0, 0, 0, 1, 0, 0]\r\n];\r\n\r\nexport const level2 = [\r\n  [0, 1, 1, 0, 0, 0, 0, 1, 1, 0],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1],\r\n  [1, 1, 1, 1, 1, 1, 1, 1, 1, 1]\r\n];\r\n","import Paddle from \"./paddle\";\r\nimport InputHandler from \"./input\";\r\nimport Ball from \"./ball\";\r\n\r\nimport { buildLevel, level1, level2 } from \"./levels\";\r\n\r\nconst GAMESTATE = {\r\n  PAUSED: 0,\r\n  RUNNING: 1,\r\n  MENU: 2,\r\n  GAMEOVER: 3,\r\n  NEWLEVEL: 4\r\n};\r\n\r\nexport default class Game {\r\n  constructor(gameWidth, gameHeight, bricksPerRow) {\r\n    this.gameWidth = gameWidth;\r\n    this.gameHeight = gameHeight;\r\n    this.gamestate = GAMESTATE.MENU;\r\n    this.ball = new Ball(this);\r\n    this.paddle = new Paddle(this);\r\n    this.gameObjects = [];\r\n    this.bricks = [];\r\n    this.lives = 3;\r\n\r\n    this.levels = [level1, level2];\r\n    this.currentLevel = 0;\r\n\r\n    new InputHandler(this.paddle, this);\r\n  }\r\n\r\n  start() {\r\n    if (\r\n      this.gamestate !== GAMESTATE.MENU &&\r\n      this.gamestate !== GAMESTATE.NEWLEVEL\r\n    )\r\n      return;\r\n\r\n    this.bricks = buildLevel(this, this.levels[this.currentLevel]);\r\n    this.ball.reset();\r\n    this.gameObjects = [this.ball, this.paddle];\r\n\r\n    this.gamestate = GAMESTATE.RUNNING;\r\n  }\r\n\r\n  update(deltaTime) {\r\n    if (this.lives === 0) this.gamestate = GAMESTATE.GAMEOVER;\r\n\r\n    if (\r\n      this.gamestate === GAMESTATE.PAUSED ||\r\n      this.gamestate === GAMESTATE.MENU ||\r\n      this.gamestate === GAMESTATE.GAMEOVER\r\n    )\r\n      return;\r\n\r\n    if (this.bricks.length === 0) {\r\n      this.currentLevel++;\r\n      this.gamestate = GAMESTATE.NEWLEVEL;\r\n      this.start();\r\n    }\r\n\r\n    [...this.gameObjects, ...this.bricks].forEach((object) =>\r\n      object.update(deltaTime)\r\n    );\r\n\r\n    this.bricks = this.bricks.filter((brick) => !brick.markedForDeletion);\r\n  }\r\n\r\n  draw(ctx) {\r\n    [...this.gameObjects, ...this.bricks].forEach((object) => object.draw(ctx));\r\n\r\n    if (this.gamestate === GAMESTATE.PAUSED) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(0,0,0,0.5)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"Paused\", this.gameWidth / 2, this.gameHeight / 2);\r\n    }\r\n\r\n    if (this.gamestate === GAMESTATE.MENU) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\r\n        \"Press SPACEBAR To Start\",\r\n        this.gameWidth / 2,\r\n        this.gameHeight / 2\r\n      );\r\n    }\r\n    if (this.gamestate === GAMESTATE.GAMEOVER) {\r\n      ctx.rect(0, 0, this.gameWidth, this.gameHeight);\r\n      ctx.fillStyle = \"rgba(0,0,0,1)\";\r\n      ctx.fill();\r\n\r\n      ctx.font = \"30px Arial\";\r\n      ctx.fillStyle = \"white\";\r\n      ctx.textAlign = \"center\";\r\n      ctx.fillText(\"GAME OVER\", this.gameWidth / 2, this.gameHeight / 2);\r\n    }\r\n  }\r\n\r\n  togglePause() {\r\n    if (this.gamestate == GAMESTATE.PAUSED) {\r\n      this.gamestate = GAMESTATE.RUNNING;\r\n    } else {\r\n      this.gamestate = GAMESTATE.PAUSED;\r\n    }\r\n  }\r\n}\r\n","import \"./styles.css\";\n\nimport Game from \"./game\";\n\nlet canvas = document.getElementById(\"gameScreen\");\n\n/* \nThe HTMLCanvasElement.getContext() method returns a drawing context on the canvas, or null if the context identifier is not supported,\nor the canvas has already been set to a different context mode.\n*/\nlet ctx = canvas.getContext(\"2d\");\n\nconst GAME_WIDTH = 800;\nconst GAME_HEIGHT = 600;\n\nlet game = new Game(GAME_WIDTH, GAME_HEIGHT);\n\nlet lastTime = 0;\n\nfunction gameLoop(timestamp) {\n  let deltaTime = timestamp - lastTime;\n  lastTime = timestamp;\n  /* Clear Screen */\n  ctx.clearRect(0, 0, GAME_WIDTH, GAME_HEIGHT);\n\n  game.update(deltaTime);\n  game.draw(ctx);\n\n  requestAnimationFrame(gameLoop);\n}\n\nrequestAnimationFrame(gameLoop);\n\n// ctx.fillStyle = \"#73D621\";\n\n// /*\n// The CanvasRenderingContext2D.fillRect() method of the Canvas 2D API draws a rectangle that is filled according to the current fillStyle.\n// */\n// ctx.fillRect(20, 20, 50, 30);\n\n// ctx.fillStyle = \"#00f\";\n\n// ctx.fillRect(140, 10, 50, 30);\n"]}